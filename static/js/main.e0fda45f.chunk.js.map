{"version":3,"sources":["App.tsx","serviceWorker.ts","index.tsx"],"names":["App","useEffect","canvas","document","getElementById","HTMLCanvasElement","canvasContext","getContext","CanvasRenderingContext2D","width","window","innerWidth","height","innerHeight","addEventListener","event","console","log","x","clientX","y","clientY","pootImage","Image","src","onload","drawImage","className","onClick","pootAudio","HTMLMediaElement","play","playAudio","id","preload","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","onUpdate","onSuccess","catch","error","ReactDOM","render","URL","process","href","origin","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"iNAiDeA,G,UA9CH,WAsCV,OArCAC,qBAAU,WACR,IAAIC,EAASC,SAASC,eAAe,UAErC,GAAIF,aAAkBG,kBAAmB,CACvC,IAAIC,EAAgBJ,EAAOK,WAAW,MAEtC,GAAID,aAAyBE,yBAA0B,CACrDF,EAAcJ,OAAOO,MAAQC,OAAOC,WACpCL,EAAcJ,OAAOU,OAASF,OAAOG,YAcrCX,EAAOY,iBAAiB,aAZT,SAACC,GACdC,QAAQC,IAAI,YACZ,IAAIC,EAAIH,EAAMI,QACVC,EAAIL,EAAMM,QAEVC,EAAY,IAAIC,MACpBD,EAAUE,IAAM,eAChBF,EAAUG,OAAS,WACJ,OAAbnB,QAAa,IAAbA,KAAeoB,UAAUJ,EAAWJ,EAAGE,WAO9C,IAaD,yBAAKO,UAAU,MAAMC,QAAS,kBAXhC,WACE,GAAIzB,SAASC,eAAe,QAAS,CACnC,IAAIyB,EAAY1B,SAASC,eAAe,QAEpCyB,aAAqBC,kBACvBD,EAAUE,QAMsBC,KAClC,2BAAOC,GAAG,OAAOC,QAAQ,OAAOV,IAAI,eACpC,4BAAQS,GAAG,cChCXE,EAAcC,QACW,cAA7B1B,OAAO2B,SAASC,UAEe,UAA7B5B,OAAO2B,SAASC,UAEhB5B,OAAO2B,SAASC,SAASC,MACvB,2DA8CN,SAASC,EAAgBC,EAAeC,GACtCC,UAAUC,cACPC,SAASJ,GACTK,MAAK,SAAAC,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACd,MAApBD,IAGJA,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBG,QACfT,UAAUC,cAAcS,YAI1BrC,QAAQC,IACN,iHAKEyB,GAAUA,EAAOY,UACnBZ,EAAOY,SAASP,KAMlB/B,QAAQC,IAAI,sCAGRyB,GAAUA,EAAOa,WACnBb,EAAOa,UAAUR,WAO5BS,OAAM,SAAAC,GACLzC,QAAQyC,MAAM,4CAA6CA,MClGjEC,IAASC,OAAO,kBAAC,EAAD,MAASxD,SAASC,eAAe,SDqB1C,SAAkBsC,GACvB,GAA6C,kBAAmBC,UAAW,CAMzE,GAJkB,IAAIiB,IACpBC,IACAnD,OAAO2B,SAASyB,MAEJC,SAAWrD,OAAO2B,SAAS0B,OAIvC,OAGFrD,OAAOI,iBAAiB,QAAQ,WAC9B,IAAM2B,EAAK,UAAMoB,IAAN,sBAEP1B,IAgEV,SAAiCM,EAAeC,GAE9CsB,MAAMvB,EAAO,CACXwB,QAAS,CAAE,iBAAkB,YAE5BnB,MAAK,SAAAoB,GAEJ,IAAMC,EAAcD,EAASD,QAAQG,IAAI,gBAEnB,MAApBF,EAASG,QACO,MAAfF,IAA8D,IAAvCA,EAAYG,QAAQ,cAG5C3B,UAAUC,cAAc2B,MAAMzB,MAAK,SAAAC,GACjCA,EAAayB,aAAa1B,MAAK,WAC7BpC,OAAO2B,SAASoC,eAKpBjC,EAAgBC,EAAOC,MAG1Bc,OAAM,WACLxC,QAAQC,IACN,oEAvFAyD,CAAwBjC,EAAOC,GAI/BC,UAAUC,cAAc2B,MAAMzB,MAAK,WACjC9B,QAAQC,IACN,iHAMJuB,EAAgBC,EAAOC,OC/C/BE,K","file":"static/js/main.e0fda45f.chunk.js","sourcesContent":["import React, { useEffect } from \"react\";\nimport \"./App.css\";\n\nconst App = () => {\n  useEffect(() => {\n    let canvas = document.getElementById(\"canvas\");\n\n    if (canvas instanceof HTMLCanvasElement) {\n      let canvasContext = canvas.getContext(\"2d\");\n\n      if (canvasContext instanceof CanvasRenderingContext2D) {\n        canvasContext.canvas.width = window.innerWidth;\n        canvasContext.canvas.height = window.innerHeight;\n\n        let addImage = (event: MouseEvent) => {\n          console.log(\"addImage\");\n          let x = event.clientX;\n          let y = event.clientY;\n\n          let pootImage = new Image();\n          pootImage.src = \"./pootis.png\";\n          pootImage.onload = () => {\n            canvasContext?.drawImage(pootImage, x, y);\n          };\n        };\n\n        canvas.addEventListener(\"mousedown\", addImage);\n      }\n    }\n  }, []);\n\n  function playAudio() {\n    if (document.getElementById(\"poot\")) {\n      let pootAudio = document.getElementById(\"poot\");\n\n      if (pootAudio instanceof HTMLMediaElement) {\n        pootAudio.play();\n      }\n    }\n  }\n\n  return (\n    <div className=\"App\" onClick={() => playAudio()}>\n      <audio id=\"poot\" preload=\"auto\" src=\"./poot.mp3\"></audio>\n      <canvas id=\"canvas\"></canvas>\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}